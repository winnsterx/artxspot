{"ast":null,"code":"var _jsxFileName = \"/Users/winker.xiao/Desktop/metspot/src/components/Playlist.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Input, Tag, Row, Space } from \"antd\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotifyApi = new SpotifyWebApi();\nconst {\n  Search\n} = Input;\n\nfunction Playlist() {\n  const [tags, setTags] = useState([]);\n  const colors = [\"magenta\", \"red\", \"volcano\", \"orange\", \"gold\", \"lime\", \"green\", \"cyan\", \"blue\", \"geekblue\", \"purple\"];\n  useEffect(() => {\n    console.log(\"tags: \", tags);\n  });\n\n  function addTag(e) {\n    if (tags.includes(e.target.value)) {\n      alert(\"Add a different word!\");\n    } else {\n      setTags(tags.concat(e.target.value));\n    }\n  }\n\n  function removeTag(e) {\n    let tagRemoved = e.target.parentNode.parentNode.textContent || e.target.parentNode.parentNode.parentNode.textContent;\n    setTags(tags.filter(e => e !== tagRemoved));\n  }\n\n  function renderTags() {\n    let tags_arr = [];\n\n    for (let i = 0; i < tags.length; i++) {\n      let color = colors[Math.floor(Math.random() * colors.length)];\n      tags_arr.push( /*#__PURE__*/React.createElement(Tag, {\n        color: color,\n        closable: true,\n        onClose: removeTag,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, tags[i]));\n    }\n\n    return tags_arr;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      minHeight: \"60%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    allowClear: true,\n    size: \"large\",\n    placeholder: \"Input five words\",\n    onPressEnter: addTag,\n    style: {\n      width: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      minHeight: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, renderTags()));\n}\n\nexport default Playlist;","map":{"version":3,"sources":["/Users/winker.xiao/Desktop/metspot/src/components/Playlist.js"],"names":["React","useState","useEffect","Input","Tag","Row","Space","SpotifyWebApi","spotifyApi","Search","Playlist","tags","setTags","colors","console","log","addTag","e","includes","target","value","alert","concat","removeTag","tagRemoved","parentNode","textContent","filter","renderTags","tags_arr","i","length","color","Math","floor","random","push","minHeight","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,KAA1B,QAAuC,MAAvC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,MAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaN,KAAnB;;AAEA,SAASO,QAAT,GAAoB;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,MAAM,GAAG,CACb,SADa,EAEb,KAFa,EAGb,SAHa,EAIb,QAJa,EAKb,MALa,EAMb,MANa,EAOb,OAPa,EAQb,MARa,EASb,MATa,EAUb,UAVa,EAWb,QAXa,CAAf;AAcAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAtB;AACD,GAFQ,CAAT;;AAIA,WAASK,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,QAAIN,IAAI,CAACO,QAAL,CAAcD,CAAC,CAACE,MAAF,CAASC,KAAvB,CAAJ,EAAmC;AACjCC,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACD,KAFD,MAEO;AACLT,MAAAA,OAAO,CAACD,IAAI,CAACW,MAAL,CAAYL,CAAC,CAACE,MAAF,CAASC,KAArB,CAAD,CAAP;AACD;AACF;;AAED,WAASG,SAAT,CAAmBN,CAAnB,EAAsB;AACpB,QAAIO,UAAU,GACZP,CAAC,CAACE,MAAF,CAASM,UAAT,CAAoBA,UAApB,CAA+BC,WAA/B,IACAT,CAAC,CAACE,MAAF,CAASM,UAAT,CAAoBA,UAApB,CAA+BA,UAA/B,CAA0CC,WAF5C;AAGAd,IAAAA,OAAO,CAACD,IAAI,CAACgB,MAAL,CAAaV,CAAD,IAAOA,CAAC,KAAKO,UAAzB,CAAD,CAAP;AACD;;AAED,WAASI,UAAT,GAAsB;AACpB,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,CAACoB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,KAAK,GAAGnB,MAAM,CAACoB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,MAAM,CAACkB,MAAlC,CAAD,CAAlB;AACAF,MAAAA,QAAQ,CAACO,IAAT,eACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAEJ,KAAZ;AAAmB,QAAA,QAAQ,MAA3B;AAA4B,QAAA,OAAO,EAAET,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGZ,IAAI,CAACmB,CAAD,CADP,CADF;AAKD;;AACD,WAAOD,QAAP;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,SAAS,EAAE;AAAb,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,KAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,kBAHd;AAIE,IAAA,YAAY,EAAErB,MAJhB;AAKE,IAAA,KAAK,EAAE;AAAEsB,MAAAA,KAAK,EAAE;AAAT,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,eAeE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,KAAK,EAAE;AAAED,MAAAA,SAAS,EAAE;AAAb,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,UAAU,EANb,CAhBF,CADF;AA2BD;;AAED,eAAelB,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Input, Tag, Row, Space } from \"antd\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst spotifyApi = new SpotifyWebApi();\nconst { Search } = Input;\n\nfunction Playlist() {\n  const [tags, setTags] = useState([]);\n  const colors = [\n    \"magenta\",\n    \"red\",\n    \"volcano\",\n    \"orange\",\n    \"gold\",\n    \"lime\",\n    \"green\",\n    \"cyan\",\n    \"blue\",\n    \"geekblue\",\n    \"purple\",\n  ];\n\n  useEffect(() => {\n    console.log(\"tags: \", tags);\n  });\n\n  function addTag(e) {\n    if (tags.includes(e.target.value)) {\n      alert(\"Add a different word!\");\n    } else {\n      setTags(tags.concat(e.target.value));\n    }\n  }\n\n  function removeTag(e) {\n    let tagRemoved =\n      e.target.parentNode.parentNode.textContent ||\n      e.target.parentNode.parentNode.parentNode.textContent;\n    setTags(tags.filter((e) => e !== tagRemoved));\n  }\n\n  function renderTags() {\n    let tags_arr = [];\n    for (let i = 0; i < tags.length; i++) {\n      let color = colors[Math.floor(Math.random() * colors.length)];\n      tags_arr.push(\n        <Tag color={color} closable onClose={removeTag}>\n          {tags[i]}\n        </Tag>\n      );\n    }\n    return tags_arr;\n  }\n\n  return (\n    <div>\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{ minHeight: \"60%\" }}\n      >\n        <Input\n          allowClear\n          size=\"large\"\n          placeholder=\"Input five words\"\n          onPressEnter={addTag}\n          style={{ width: \"50%\" }}\n        />\n      </Row>\n      <Break />\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{ minHeight: \"50%\" }}\n      >\n        {renderTags()}\n      </Row>\n    </div>\n  );\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}