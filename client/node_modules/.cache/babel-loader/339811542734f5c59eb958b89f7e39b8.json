{"ast":null,"code":"var _jsxFileName = \"/Users/winker.xiao/Desktop/metspot/src/components/Generator.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Spin, Typography, Row } from \"antd\";\nimport axios from \"axios\";\nimport request from \"superagent\";\nconst {\n  Title\n} = Typography;\nconst apiUrl = \"https://api.artsy.net/api/search?type=\";\n\nfunction Generator({\n  tracks,\n  tags\n}) {\n  let queryString = \"\";\n\n  function generateArt() {\n    request.get(\"/generate\").then(response => {\n      console.log(\"Artsy token: \", response.text);\n      let query = \"dummy\";\n      request.get(apiUrl).set(\"X-Xapp-Token\", response.text).query({\n        q: query\n      }).query({\n        type: \"artwork\"\n      }).then(res => console.log(\"artsy artworks: \", res.body._embedded.results[0])).catch(err => console.log(err));\n    }).catch(error => console.log(error));\n  } // Returns the songNames array of the first 20 songs\n\n\n  function collectNamesAndTags() {\n    let songs = tracks.items;\n    let songNames = [];\n    let limit = 20;\n\n    if (songs.length < 20) {\n      limit = songs.length;\n    }\n\n    for (let i = 0; i < limit; i++) {\n      let currSongName = songs[i].track.name;\n      currSongName.slice(0, currSongName.indexOf(\"-\")); // strips string after '-' to get just name\n\n      let n = currSongName.indexOf(\"(\");\n      currSongName = currSongName.substring(0, n != -1 ? n : currSongName.length); // strips string after '-' to get just name\n\n      songNames.push(currSongName);\n      queryString.concat(\" \", currSongName);\n    }\n\n    console.log(queryString);\n    return songNames;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"center\",\n    align: \"bottom\",\n    style: {\n      minHeight: \"45vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Generating Cover Art...\"), collectNamesAndTags(), generateArt())), /*#__PURE__*/React.createElement(Row, {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Generator;","map":{"version":3,"sources":["/Users/winker.xiao/Desktop/metspot/src/components/Generator.js"],"names":["React","useState","useEffect","Spin","Typography","Row","axios","request","Title","apiUrl","Generator","tracks","tags","queryString","generateArt","get","then","response","console","log","text","query","set","q","type","res","body","_embedded","results","catch","err","error","collectNamesAndTags","songs","items","songNames","limit","length","i","currSongName","track","name","slice","indexOf","n","substring","push","concat","minHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Spin, Typography, Row } from \"antd\";\nimport axios from \"axios\";\nimport request from \"superagent\";\n\nconst { Title } = Typography;\nconst apiUrl = \"https://api.artsy.net/api/search?type=\";\n\nfunction Generator({ tracks, tags }) {\n  let queryString = \"\";\n\n  function generateArt() {\n    request\n      .get(\"/generate\")\n      .then((response) => {\n        console.log(\"Artsy token: \", response.text);\n        let query = \"dummy\";\n        request\n          .get(apiUrl)\n          .set(\"X-Xapp-Token\", response.text)\n          .query({ q: query })\n          .query({ type: \"artwork\" })\n          .then((res) =>\n            console.log(\"artsy artworks: \", res.body._embedded.results[0])\n          )\n          .catch((err) => console.log(err));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  // Returns the songNames array of the first 20 songs\n  function collectNamesAndTags() {\n    let songs = tracks.items;\n    let songNames = [];\n    let limit = 20;\n    if (songs.length < 20) {\n      limit = songs.length;\n    }\n    for (let i = 0; i < limit; i++) {\n      let currSongName = songs[i].track.name;\n      currSongName.slice(0, currSongName.indexOf(\"-\")); // strips string after '-' to get just name\n      let n = currSongName.indexOf(\"(\");\n      currSongName = currSongName.substring(\n        0,\n        n != -1 ? n : currSongName.length\n      ); // strips string after '-' to get just name\n      songNames.push(currSongName);\n      queryString.concat(\" \", currSongName);\n    }\n    console.log(queryString);\n    return songNames;\n  }\n\n  return (\n    <div>\n      <Row justify=\"center\" align=\"bottom\" style={{ minHeight: \"45vh\" }}>\n        <Typography>\n          <Title level={2}>Generating Cover Art...</Title>\n          {collectNamesAndTags()}\n          {generateArt()}\n        </Typography>\n      </Row>\n      <Row justify=\"center\">\n        <Spin size=\"large\" />\n      </Row>\n    </div>\n  );\n}\n\nexport default Generator;\n"]},"metadata":{},"sourceType":"module"}