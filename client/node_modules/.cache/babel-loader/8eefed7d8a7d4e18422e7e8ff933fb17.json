{"ast":null,"code":"var _jsxFileName = \"/Users/winker.xiao/devs/metspot/client/src/components/Generator.js\";\nimport React, { useState } from \"react\";\nimport { Spin, Typography, Row } from \"antd\";\nimport request from \"superagent\";\nimport Artwork from \"./Artwork\";\nconst {\n  Title\n} = Typography;\nconst apiUrl = \"https://api.artsy.net/api/search?type=\";\n\nfunction Generator({\n  tracks\n}) {\n  const [artwork, setArtwork] = useState(null);\n\n  function generateArt() {\n    request.get(\"/generate\").then(response => {\n      let query = collectNames();\n      request.get(apiUrl).set(\"X-Xapp-Token\", response.text).query({\n        q: query\n      }).query({\n        type: \"artwork\"\n      }).then(res => {\n        let artworks = res.body._embedded.results;\n        console.log(\"artsy's relevant artwork: \", artworks);\n        console.log(\"token: \", response.text);\n        let chosen = artworks[Math.floor(Math.random() * artworks.length)];\n        setArtwork(chosen);\n      }).catch(err => console.log(err));\n    }).catch(error => console.log(error));\n  } // Returns the songNames array of the first 20 songs\n\n\n  function collectNames() {\n    let songs = tracks.items;\n    let songNames = [];\n    let limit = 10;\n\n    if (songs.length < limit) {\n      limit = songs.length;\n    }\n\n    for (let i = 0; i < limit; i++) {\n      let currSongName = songs[i].track.name;\n      currSongName.slice(0, currSongName.indexOf(\"-\")); // strips string after '-' to get just name\n\n      let n = currSongName.indexOf(\"(\");\n      currSongName = currSongName.substring(0, n !== -1 ? n : currSongName.length); // strips string after '-' to get just name\n\n      songNames.push(currSongName);\n    }\n\n    return songNames.join(\" \");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, artwork ? /*#__PURE__*/React.createElement(Artwork, {\n    artwork: artwork,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      minHeight: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"generating...\"), /*#__PURE__*/React.createElement(Spin, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }), generateArt()))));\n}\n\nexport default Generator;","map":{"version":3,"sources":["/Users/winker.xiao/devs/metspot/client/src/components/Generator.js"],"names":["React","useState","Spin","Typography","Row","request","Artwork","Title","apiUrl","Generator","tracks","artwork","setArtwork","generateArt","get","then","response","query","collectNames","set","text","q","type","res","artworks","body","_embedded","results","console","log","chosen","Math","floor","random","length","catch","err","error","songs","items","songNames","limit","i","currSongName","track","name","slice","indexOf","n","substring","push","join","minHeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Spin, Typography, Row } from \"antd\";\nimport request from \"superagent\";\nimport Artwork from \"./Artwork\";\n\nconst { Title } = Typography;\nconst apiUrl = \"https://api.artsy.net/api/search?type=\";\n\nfunction Generator({ tracks }) {\n  const [artwork, setArtwork] = useState(null);\n\n  function generateArt() {\n    request\n      .get(\"/generate\")\n      .then((response) => {\n        let query = collectNames();\n        request\n          .get(apiUrl)\n          .set(\"X-Xapp-Token\", response.text)\n          .query({ q: query })\n          .query({ type: \"artwork\" })\n          .then((res) => {\n            let artworks = res.body._embedded.results;\n            console.log(\"artsy's relevant artwork: \", artworks);\n            console.log(\"token: \", response.text);\n            let chosen = artworks[Math.floor(Math.random() * artworks.length)];\n            setArtwork(chosen);\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((error) => console.log(error));\n  }\n\n  // Returns the songNames array of the first 20 songs\n  function collectNames() {\n    let songs = tracks.items;\n    let songNames = [];\n    let limit = 10;\n    if (songs.length < limit) {\n      limit = songs.length;\n    }\n    for (let i = 0; i < limit; i++) {\n      let currSongName = songs[i].track.name;\n      currSongName.slice(0, currSongName.indexOf(\"-\")); // strips string after '-' to get just name\n      let n = currSongName.indexOf(\"(\");\n      currSongName = currSongName.substring(\n        0,\n        n !== -1 ? n : currSongName.length\n      ); // strips string after '-' to get just name\n      songNames.push(currSongName);\n    }\n    return songNames.join(\" \");\n  }\n\n  return (\n    <div className=\"page\">\n      {artwork ? (\n        <Artwork artwork={artwork} />\n      ) : (\n        <div className=\"page\">\n          <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"100%\" }}>\n            <Typography>\n              <Title level={3}>generating...</Title>\n              <Spin size=\"large\" />\n              {generateArt()}\n            </Typography>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Generator;\n"]},"metadata":{},"sourceType":"module"}